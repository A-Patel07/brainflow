sudo: required
dist: xenial

os:
  - linux
  - osx

osx_image: xcode9.4

services:
  - docker

env:
  global:
    - secure: QDhFByXil9s1ylj7oGofbM1gn7zWk85pj08NDZIRfvnkhg3h7+9lcV62Lqz/4bPBoURDHTjo5FQnTbWr09cBomtG+/yZ+KU+eTWu/Y1uwxQbUzpRVlOaWnrQxvHamyenK83XuiRnnXpGydjbBT1cnXM4foE93V+1t0rKk9JlGml17T3lCC6UwQirtDEWAbCqYWsFTKNq/pp3KUIxqceX3gZxY/1iI5Jk7DsgdhBSL4SIRxH913QjYZtZaLJR7Ea8jGHYqJlAc5ahrDdLZHARYcULGU/5/g9Jk2noeZzUV3gfRGLVecvB2lG4pMed3dKVLHCJ9ULmQvybfDIQ9B5ZSKvLyTfmJBtvsExUS1Vf9JT5tEhPP59jVPi3EhIvgFNEQt33HXLZELu8LMKG+5uLUoVlIuV9RwyHGh2e00fqpItTavT35VfmNrYtpxlANyfHWhu1DVI1fSuYi/VZCC1cyf7Yi4IsKooWgg/veLlDTfqfCePGoq9NpCopFvjuqdhKgM2yK/cVPKBu+cYmHjzrgoDNn0jfthn2/DeSMKOxzZxX62ZZHVqEQLeMmRT3pmVWo+DQwbWHdda2SAE3BGGlsSPlWOTmMO1hqOO+FpE4N5ObS/Toy/THuviVnT+jGt2LgStfimssZOCndHDUFAO9vkBVS1wNZ6y3ibJ3kihHJEw=
    - secure: TCCuoURDpO/qIOyURTTi4mHubLc+HN5/XAKcM7uuHr4gJNw1/KQlZmOhQICv/Z7Nz5yGzCCsjl3v9zPM8VSngaHv8Z5QKdBu+hPZY/YINDqyrc5rs7lc2t/so/Wc47nUyjFuZ7wf1iGZnrXRzPrJa/tiIhBCFqS/+gIdKNn5NFDYY/pjF3Tesek969QuwCJE4sA1zzEBNxmSdo5QdbZ6yA+tLV/ccrfFcBTWYeGe9nSOG4TDJTQ1v/5aWKRIepxcMwnLaS0iyRc2GeB9KxnJsu09I4aChCo7B26onOZFcwhOwo8Vsv65HHMBMBjnJAQwN5uPPMGprej9bX3YTz+4BSLMU7+3Q1E3uonBVEbQIieY92XQmakgAFgN2BYpnP/7Wy6E0FP+j9+ia5OB/tsRC+8Vcc5PtRm5sOsBsfftYS3r4b47yH5+DEiaPsoZRs1bXiDgriwcw0aTUbqNZLUHhX8gbTqeuL3mOo6iVo5bmWIYtB+xjcPaHgKjqPPTXgmc68hQo7Qmd4i9b7jbPTR9McI6y4VGSHdzZF7jM1agl16At3EkFaEMjYsxk96IlsSvsQjK5E0RDd4+5q0M246Ua2ikBKhDH/JD9SFlO/jxyAMaofiEobg0WgQz/3kJHdqw5anUvOamziSMi48xVDwScjhnX2ihBKjuxmMEX9JPXHM=

language: java

addons:
  apt:
    packages:
      - maven
      - python3
      - python3-setuptools
      - python3-pip
      # - r-base
      - libxml2-dev
      - valgrind
  # R disabled. It's taking up too much time in CI
  # homebrew:
  #   packages:
  #     - r
  #   update: true

install:
  - sudo pip3 install --upgrade pip
  - sudo pip3 install cmake==3.13.0
  - sudo -H pip3 install --upgrade setuptools wheel virtualenv
  - sudo -H pip3 install $TRAVIS_BUILD_DIR/emulator
  # R disabled. It's taking up too much time in CI
  # # install required packages for R
  # - sudo -H R --vanilla -e 'install.packages("knitr", repos="http://cran.us.r-project.org")'
  # - sudo -H R --vanilla -e 'install.packages("reticulate", repos="http://cran.us.r-project.org")'

before_script:
  # need to build in manylinux docker container!
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then
      docker pull dockcross/manylinux-x64 ;
    fi
    # for all tests except C++ we need libraries built inside docker and we need them for production
    # for C++ test we need libs to be compiled in the same env as test
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then
      cd $TRAVIS_BUILD_DIR && mkdir build_outside && cd build_outside && cmake -DCMAKE_INSTALL_PREFIX=$TRAVIS_BUILD_DIR/installed -DCMAKE_BUILD_TYPE=Release .. && sudo -H make && make install;
    fi
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then
      docker run -e TRAVIS_BUILD_DIR=$TRAVIS_BUILD_DIR -v $TRAVIS_BUILD_DIR:$TRAVIS_BUILD_DIR dockcross/manylinux-x64 /bin/bash -c "/opt/python/cp36-cp36m/bin/pip3.6 install cmake==3.13.0 && cd $TRAVIS_BUILD_DIR && mkdir build && cd build && cmake -DCMAKE_INSTALL_PREFIX=$TRAVIS_BUILD_DIR/installed_docker -DCMAKE_BUILD_TYPE=Release .. && make && make install" ;
    fi
  # build for mac
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then
      cd $TRAVIS_BUILD_DIR && mkdir build && cd build && cmake -DCMAKE_INSTALL_PREFIX=$TRAVIS_BUILD_DIR/installed -DCMAKE_BUILD_TYPE=Release .. && make && make install ;
    fi
  - sudo -H pip3 install $TRAVIS_BUILD_DIR/python-package
  - sudo -H pip3 install -r $TRAVIS_BUILD_DIR/tests/python/requirements.txt
  # R disabled. It's taking up too much time in CI
  # - cd $TRAVIS_BUILD_DIR/r-package/brainflow && sudo -H R CMD build . && sudo -H R CMD INSTALL brainflow_0.0.0.9000.tar.gz
  - cd $TRAVIS_BUILD_DIR/tests/cpp/get_data_demo && mkdir build && cd build && cmake -DCMAKE_PREFIX_PATH=$TRAVIS_BUILD_DIR/installed .. && make
  - cd $TRAVIS_BUILD_DIR/tests/cpp/signal_processing_demo && mkdir build && cd build && cmake -DCMAKE_PREFIX_PATH=$TRAVIS_BUILD_DIR/installed .. && make
  - cd $TRAVIS_BUILD_DIR && cd java-package/brainflow && mvn package
  # to run java tests need to copypaste libs even if they are inside jar file
  - cp $TRAVIS_BUILD_DIR/java-package/brainflow/target/classes/brainflow/*.json $TRAVIS_BUILD_DIR/java-package/brainflow/target/classes/
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then
      cp $TRAVIS_BUILD_DIR/java-package/brainflow/target/classes/brainflow/*.so $TRAVIS_BUILD_DIR/java-package/brainflow/target/classes/ ;
    fi
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then
      cp $TRAVIS_BUILD_DIR/java-package/brainflow/target/classes/brainflow/*.dylib $TRAVIS_BUILD_DIR/java-package/brainflow/target/classes/ ;
    fi

script:
  # tests for boards
  # tests for cyton
  - sudo -H python3 $TRAVIS_BUILD_DIR/emulator/brainflow_emulator/cyton_linux.py python3 $TRAVIS_BUILD_DIR/tests/python/brainflow_get_data.py --log --board-id 0 --serial-port
  - sudo -H python3 $TRAVIS_BUILD_DIR/emulator/brainflow_emulator/cyton_linux.py python3 $TRAVIS_BUILD_DIR/tests/python/brainflow_get_data.py --log --board-id 0 --streamer-params file://file_streamer.csv:w --serial-port
  - sudo -H python3 $TRAVIS_BUILD_DIR/emulator/brainflow_emulator/cyton_linux.py python3 $TRAVIS_BUILD_DIR/tests/python/brainflow_multiboard_get_data.py --log --board-id 0 --serial-port
  - LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$TRAVIS_BUILD_DIR/installed/lib python3 $TRAVIS_BUILD_DIR/emulator/brainflow_emulator/cyton_linux.py $TRAVIS_BUILD_DIR/tests/cpp/get_data_demo/build/brainflow_get_data --board-id 0 --serial-port
  - if [ `which valgrind` ]; then
      LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$TRAVIS_BUILD_DIR/installed/lib python3 $TRAVIS_BUILD_DIR/emulator/brainflow_emulator/cyton_linux.py valgrind --error-exitcode=1 --leak-check=full $TRAVIS_BUILD_DIR/tests/cpp/get_data_demo/build/brainflow_get_data --board-id 0 --serial-port ;
    fi
  # tests for synthetic board
  - python3 $TRAVIS_BUILD_DIR/tests/python/brainflow_get_data.py --log --board-id -1
  - LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$TRAVIS_BUILD_DIR/installed/lib $TRAVIS_BUILD_DIR/tests/cpp/get_data_demo/build/brainflow_get_data --board-id -1
  - if [ `which valgrind` ]; then
      LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$TRAVIS_BUILD_DIR/installed/lib valgrind --error-exitcode=1 --leak-check=full $TRAVIS_BUILD_DIR/tests/cpp/get_data_demo/build/brainflow_get_data --board-id -1;
    fi
  - if [ `which valgrind` ]; then
      LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$TRAVIS_BUILD_DIR/installed/lib valgrind --error-exitcode=1 --leak-check=full $TRAVIS_BUILD_DIR/tests/cpp/get_data_demo/build/brainflow_file_stream --board-id -1;
    fi
  - cd $TRAVIS_BUILD_DIR/java-package/brainflow && mvn exec:java -Dexec.mainClass="brainflow.examples.BrainFlowGetData" -Dexec.args="--board-id -1"
  # R disabled. It's taking up too much time in CI
  # - Rscript $TRAVIS_BUILD_DIR/tests/r/brainflow_get_data.R
  # tests for cyton daisy
  - sudo -H python3 $TRAVIS_BUILD_DIR/emulator/brainflow_emulator/cyton_linux.py python3 $TRAVIS_BUILD_DIR/tests/python/brainflow_get_data.py --log --board-id 2 --serial-port 
  - LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$TRAVIS_BUILD_DIR/installed/lib python3 $TRAVIS_BUILD_DIR/emulator/brainflow_emulator/cyton_linux.py $TRAVIS_BUILD_DIR/tests/cpp/get_data_demo/build/brainflow_get_data --board-id 2 --serial-port
  - if [ `which valgrind` ]; then
      LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$TRAVIS_BUILD_DIR/installed/lib python3 $TRAVIS_BUILD_DIR/emulator/brainflow_emulator/cyton_linux.py valgrind --error-exitcode=1 --leak-check=full $TRAVIS_BUILD_DIR/tests/cpp/get_data_demo/build/brainflow_get_data --board-id 2 --serial-port ;
    fi
  # tests for novaxr
  - sudo -H python3 $TRAVIS_BUILD_DIR/emulator/brainflow_emulator/novaxr_udp.py python3 $TRAVIS_BUILD_DIR/tests/python/brainflow_get_data.py --board-id 3 --ip-address 127.0.0.1 --ip-protocol 1
  - LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$TRAVIS_BUILD_DIR/installed/lib python3 $TRAVIS_BUILD_DIR/emulator/brainflow_emulator/novaxr_udp.py $TRAVIS_BUILD_DIR/tests/cpp/get_data_demo/build/brainflow_get_data --board-id 3 --ip-address 127.0.0.1 --ip-protocol 1
  - if [ `which valgrind` ]; then
      LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$TRAVIS_BUILD_DIR/installed/lib python3 $TRAVIS_BUILD_DIR/emulator/brainflow_emulator/novaxr_udp.py valgrind --error-exitcode=1 --leak-check=full $TRAVIS_BUILD_DIR/tests/cpp/get_data_demo/build/brainflow_get_data --board-id 3 --ip-address 127.0.0.1 --ip-protocol 1 ;
    fi
  - sudo -H python3 $TRAVIS_BUILD_DIR/emulator/brainflow_emulator/novaxr_tcp.py python3 $TRAVIS_BUILD_DIR/tests/python/brainflow_get_data.py --board-id 3 --ip-address 127.0.0.1 --ip-protocol 2
  # tests for wifi shield, fails on macos due to an issue in emulator
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then
      sudo -H python3 $TRAVIS_BUILD_DIR/emulator/brainflow_emulator/wifi_shield_emulator.py python3 $TRAVIS_BUILD_DIR/tests/python/brainflow_get_data.py --log --board-id 4 --ip-address 127.0.0.1 --ip-port 17982 ;
    fi
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then
      sudo -H python3 $TRAVIS_BUILD_DIR/emulator/brainflow_emulator/wifi_shield_emulator.py python3 $TRAVIS_BUILD_DIR/tests/python/brainflow_get_data.py --log --board-id 5 --ip-address 127.0.0.1 --ip-port 17983 ;
    fi
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then
      sudo -H python3 $TRAVIS_BUILD_DIR/emulator/brainflow_emulator/wifi_shield_emulator.py python3 $TRAVIS_BUILD_DIR/tests/python/brainflow_get_data.py --log --board-id 6 --ip-address 127.0.0.1 --ip-port 17984 ;
    fi
  # todo replace it by error suppression in http.h file, there is nothing critical in terms of errors
  # - if [ `which valgrind` ]; then
  #    sudo -H LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$TRAVIS_BUILD_DIR/installed/lib python3 $TRAVIS_BUILD_DIR/emulator/brainflow_emulator/wifi_shield_emulator.py valgrind --error-exitcode=1 --leak-check=full $TRAVIS_BUILD_DIR/tests/cpp/get_data_demo/build/brainflow_get_data --board-id 6 --ip-address 127.0.0.1 --ip-port 17985 ;
  #  fi
  # tests for signal processing
  # python
  - python3 $TRAVIS_BUILD_DIR/tests/python/denoising.py
  - python3 $TRAVIS_BUILD_DIR/tests/python/serialization.py
  - python3 $TRAVIS_BUILD_DIR/tests/python/signal_filtering.py
  - python3 $TRAVIS_BUILD_DIR/tests/python/transforms.py
  - python3 $TRAVIS_BUILD_DIR/tests/python/downsampling.py
  - python3 $TRAVIS_BUILD_DIR/tests/python/brainflow_to_mne.py
  # C++
  - LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$TRAVIS_BUILD_DIR/installed/lib $TRAVIS_BUILD_DIR/tests/cpp/signal_processing_demo/build/denoising
  - LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$TRAVIS_BUILD_DIR/installed/lib $TRAVIS_BUILD_DIR/tests/cpp/signal_processing_demo/build/downsampling
  - LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$TRAVIS_BUILD_DIR/installed/lib $TRAVIS_BUILD_DIR/tests/cpp/signal_processing_demo/build/signal_filtering
  - LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$TRAVIS_BUILD_DIR/installed/lib $TRAVIS_BUILD_DIR/tests/cpp/signal_processing_demo/build/serialization
  - LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$TRAVIS_BUILD_DIR/installed/lib $TRAVIS_BUILD_DIR/tests/cpp/signal_processing_demo/build/transforms
  # valgrind tests
  - if [ `which valgrind` ]; then
      LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$TRAVIS_BUILD_DIR/installed/lib valgrind --error-exitcode=1 --leak-check=full $TRAVIS_BUILD_DIR/tests/cpp/signal_processing_demo/build/denoising ;
    fi
  - if [ `which valgrind` ]; then
      LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$TRAVIS_BUILD_DIR/installed/lib valgrind --error-exitcode=1 --leak-check=full $TRAVIS_BUILD_DIR/tests/cpp/signal_processing_demo/build/downsampling ;
    fi
  - if [ `which valgrind` ]; then
      LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$TRAVIS_BUILD_DIR/installed/lib valgrind --error-exitcode=1 --leak-check=full $TRAVIS_BUILD_DIR/tests/cpp/signal_processing_demo/build/signal_filtering ;
    fi
  - if [ `which valgrind` ]; then
      LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$TRAVIS_BUILD_DIR/installed/lib valgrind --error-exitcode=1 --leak-check=full $TRAVIS_BUILD_DIR/tests/cpp/signal_processing_demo/build/serialization ;
    fi
  - if [ `which valgrind` ]; then
      LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$TRAVIS_BUILD_DIR/installed/lib valgrind --error-exitcode=1 --leak-check=full $TRAVIS_BUILD_DIR/tests/cpp/signal_processing_demo/build/transforms ;
    fi
  # java
  - cd $TRAVIS_BUILD_DIR/java-package/brainflow && mvn exec:java -Dexec.mainClass="brainflow.examples.Denoising"
  - cd $TRAVIS_BUILD_DIR/java-package/brainflow && mvn exec:java -Dexec.mainClass="brainflow.examples.Downsampling"
  - cd $TRAVIS_BUILD_DIR/java-package/brainflow && mvn exec:java -Dexec.mainClass="brainflow.examples.Serialization"
  - cd $TRAVIS_BUILD_DIR/java-package/brainflow && mvn exec:java -Dexec.mainClass="brainflow.examples.SignalFiltering"
  - cd $TRAVIS_BUILD_DIR/java-package/brainflow && mvn exec:java -Dexec.mainClass="brainflow.examples.Transforms"


# after_success:
#   - sudo -H pip3 install awscli
#   # push libraries from docker!
#   - if [ "$TRAVIS_OS_NAME" = "linux" ]; then
#       aws s3 cp $TRAVIS_BUILD_DIR/installed_docker/lib/ s3://brainflow/$TRAVIS_COMMIT/$TRAVIS_OS_NAME --recursive ;
#     fi
#   - if [ "$TRAVIS_OS_NAME" = "osx" ]; then
#       aws s3 cp $TRAVIS_BUILD_DIR/installed/lib/ s3://brainflow/$TRAVIS_COMMIT/$TRAVIS_OS_NAME --recursive ;
#     fi
#   # notify that everything is ok
#   - echo success > ${TRAVIS_OS_NAME}_success && aws s3 cp ${TRAVIS_OS_NAME}_success s3://brainflow/$TRAVIS_COMMIT/

# after_failure:
#   # notify Appveyor of travis test failure
#   echo failure > ${TRAVIS_OS_NAME}_failure && aws s3 cp ${TRAVIS_OS_NAME}_failure s3://brainflow/$TRAVIS_COMMIT/

notifications:
  email:
    on_success: never
    on_failure: always
